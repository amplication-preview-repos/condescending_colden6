/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Aasx } from "./Aasx";
import { AasxCountArgs } from "./AasxCountArgs";
import { AasxFindManyArgs } from "./AasxFindManyArgs";
import { AasxFindUniqueArgs } from "./AasxFindUniqueArgs";
import { CreateAasxArgs } from "./CreateAasxArgs";
import { UpdateAasxArgs } from "./UpdateAasxArgs";
import { DeleteAasxArgs } from "./DeleteAasxArgs";
import { Asset } from "../../asset/base/Asset";
import { AasxService } from "../aasx.service";
@graphql.Resolver(() => Aasx)
export class AasxResolverBase {
  constructor(protected readonly service: AasxService) {}

  async _aasxesMeta(
    @graphql.Args() args: AasxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Aasx])
  async aasxes(@graphql.Args() args: AasxFindManyArgs): Promise<Aasx[]> {
    return this.service.aasxes(args);
  }

  @graphql.Query(() => Aasx, { nullable: true })
  async aasx(@graphql.Args() args: AasxFindUniqueArgs): Promise<Aasx | null> {
    const result = await this.service.aasx(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Aasx)
  async createAasx(@graphql.Args() args: CreateAasxArgs): Promise<Aasx> {
    return await this.service.createAasx({
      ...args,
      data: {
        ...args.data,

        asset: args.data.asset
          ? {
              connect: args.data.asset,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Aasx)
  async updateAasx(@graphql.Args() args: UpdateAasxArgs): Promise<Aasx | null> {
    try {
      return await this.service.updateAasx({
        ...args,
        data: {
          ...args.data,

          asset: args.data.asset
            ? {
                connect: args.data.asset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Aasx)
  async deleteAasx(@graphql.Args() args: DeleteAasxArgs): Promise<Aasx | null> {
    try {
      return await this.service.deleteAasx(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  async getAsset(@graphql.Parent() parent: Aasx): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
