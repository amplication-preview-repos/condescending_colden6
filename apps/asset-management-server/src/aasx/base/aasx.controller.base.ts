/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AasxService } from "../aasx.service";
import { AasxCreateInput } from "./AasxCreateInput";
import { Aasx } from "./Aasx";
import { AasxFindManyArgs } from "./AasxFindManyArgs";
import { AasxWhereUniqueInput } from "./AasxWhereUniqueInput";
import { AasxUpdateInput } from "./AasxUpdateInput";

export class AasxControllerBase {
  constructor(protected readonly service: AasxService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Aasx })
  async createAasx(@common.Body() data: AasxCreateInput): Promise<Aasx> {
    return await this.service.createAasx({
      data: {
        ...data,

        asset: data.asset
          ? {
              connect: data.asset,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        asset: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Aasx] })
  @ApiNestedQuery(AasxFindManyArgs)
  async aasxes(@common.Req() request: Request): Promise<Aasx[]> {
    const args = plainToClass(AasxFindManyArgs, request.query);
    return this.service.aasxes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        asset: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Aasx })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aasx(
    @common.Param() params: AasxWhereUniqueInput
  ): Promise<Aasx | null> {
    const result = await this.service.aasx({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        asset: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Aasx })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAasx(
    @common.Param() params: AasxWhereUniqueInput,
    @common.Body() data: AasxUpdateInput
  ): Promise<Aasx | null> {
    try {
      return await this.service.updateAasx({
        where: params,
        data: {
          ...data,

          asset: data.asset
            ? {
                connect: data.asset,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,

          asset: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Aasx })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAasx(
    @common.Param() params: AasxWhereUniqueInput
  ): Promise<Aasx | null> {
    try {
      return await this.service.deleteAasx({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,

          asset: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
