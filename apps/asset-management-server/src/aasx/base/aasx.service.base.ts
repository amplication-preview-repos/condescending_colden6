/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Aasx as PrismaAasx,
  Asset as PrismaAsset,
} from "@prisma/client";

export class AasxServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AasxCountArgs, "select">): Promise<number> {
    return this.prisma.aasx.count(args);
  }

  async aasxes(args: Prisma.AasxFindManyArgs): Promise<PrismaAasx[]> {
    return this.prisma.aasx.findMany(args);
  }
  async aasx(args: Prisma.AasxFindUniqueArgs): Promise<PrismaAasx | null> {
    return this.prisma.aasx.findUnique(args);
  }
  async createAasx(args: Prisma.AasxCreateArgs): Promise<PrismaAasx> {
    return this.prisma.aasx.create(args);
  }
  async updateAasx(args: Prisma.AasxUpdateArgs): Promise<PrismaAasx> {
    return this.prisma.aasx.update(args);
  }
  async deleteAasx(args: Prisma.AasxDeleteArgs): Promise<PrismaAasx> {
    return this.prisma.aasx.delete(args);
  }

  async getAsset(parentId: string): Promise<PrismaAsset | null> {
    return this.prisma.aasx
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }
}
