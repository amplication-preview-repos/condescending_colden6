/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetHierarchyService } from "../assetHierarchy.service";
import { AssetHierarchyCreateInput } from "./AssetHierarchyCreateInput";
import { AssetHierarchy } from "./AssetHierarchy";
import { AssetHierarchyFindManyArgs } from "./AssetHierarchyFindManyArgs";
import { AssetHierarchyWhereUniqueInput } from "./AssetHierarchyWhereUniqueInput";
import { AssetHierarchyUpdateInput } from "./AssetHierarchyUpdateInput";
import { AssetFindManyArgs } from "../../asset/base/AssetFindManyArgs";
import { Asset } from "../../asset/base/Asset";
import { AssetWhereUniqueInput } from "../../asset/base/AssetWhereUniqueInput";

export class AssetHierarchyControllerBase {
  constructor(protected readonly service: AssetHierarchyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetHierarchy })
  async createAssetHierarchy(
    @common.Body() data: AssetHierarchyCreateInput
  ): Promise<AssetHierarchy> {
    return await this.service.createAssetHierarchy({
      data: {
        ...data,

        hierarchyLevel: data.hierarchyLevel
          ? {
              connect: data.hierarchyLevel,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        parent: true,

        hierarchyLevel: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetHierarchy] })
  @ApiNestedQuery(AssetHierarchyFindManyArgs)
  async assetHierarchies(
    @common.Req() request: Request
  ): Promise<AssetHierarchy[]> {
    const args = plainToClass(AssetHierarchyFindManyArgs, request.query);
    return this.service.assetHierarchies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        parent: true,

        hierarchyLevel: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetHierarchy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetHierarchy(
    @common.Param() params: AssetHierarchyWhereUniqueInput
  ): Promise<AssetHierarchy | null> {
    const result = await this.service.assetHierarchy({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        parent: true,

        hierarchyLevel: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetHierarchy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetHierarchy(
    @common.Param() params: AssetHierarchyWhereUniqueInput,
    @common.Body() data: AssetHierarchyUpdateInput
  ): Promise<AssetHierarchy | null> {
    try {
      return await this.service.updateAssetHierarchy({
        where: params,
        data: {
          ...data,

          hierarchyLevel: data.hierarchyLevel
            ? {
                connect: data.hierarchyLevel,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          parent: true,

          hierarchyLevel: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetHierarchy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetHierarchy(
    @common.Param() params: AssetHierarchyWhereUniqueInput
  ): Promise<AssetHierarchy | null> {
    try {
      return await this.service.deleteAssetHierarchy({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          parent: true,

          hierarchyLevel: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/assets")
  @ApiNestedQuery(AssetFindManyArgs)
  async findAssets(
    @common.Req() request: Request,
    @common.Param() params: AssetHierarchyWhereUniqueInput
  ): Promise<Asset[]> {
    const query = plainToClass(AssetFindManyArgs, request.query);
    const results = await this.service.findAssets(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        assetHierarchy: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/assets")
  async connectAssets(
    @common.Param() params: AssetHierarchyWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assets: {
        connect: body,
      },
    };
    await this.service.updateAssetHierarchy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/assets")
  async updateAssets(
    @common.Param() params: AssetHierarchyWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assets: {
        set: body,
      },
    };
    await this.service.updateAssetHierarchy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/assets")
  async disconnectAssets(
    @common.Param() params: AssetHierarchyWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assets: {
        disconnect: body,
      },
    };
    await this.service.updateAssetHierarchy({
      where: params,
      data,
      select: { id: true },
    });
  }
}
