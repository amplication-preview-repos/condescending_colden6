/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AssetHierarchy as PrismaAssetHierarchy,
  Asset as PrismaAsset,
  HierarchyLevel as PrismaHierarchyLevel,
} from "@prisma/client";

export class AssetHierarchyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssetHierarchyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assetHierarchy.count(args);
  }

  async assetHierarchies(
    args: Prisma.AssetHierarchyFindManyArgs
  ): Promise<PrismaAssetHierarchy[]> {
    return this.prisma.assetHierarchy.findMany(args);
  }
  async assetHierarchy(
    args: Prisma.AssetHierarchyFindUniqueArgs
  ): Promise<PrismaAssetHierarchy | null> {
    return this.prisma.assetHierarchy.findUnique(args);
  }
  async createAssetHierarchy(
    args: Prisma.AssetHierarchyCreateArgs
  ): Promise<PrismaAssetHierarchy> {
    return this.prisma.assetHierarchy.create(args);
  }
  async updateAssetHierarchy(
    args: Prisma.AssetHierarchyUpdateArgs
  ): Promise<PrismaAssetHierarchy> {
    return this.prisma.assetHierarchy.update(args);
  }
  async deleteAssetHierarchy(
    args: Prisma.AssetHierarchyDeleteArgs
  ): Promise<PrismaAssetHierarchy> {
    return this.prisma.assetHierarchy.delete(args);
  }

  async findAssets(
    parentId: string,
    args: Prisma.AssetFindManyArgs
  ): Promise<PrismaAsset[]> {
    return this.prisma.assetHierarchy
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assets(args);
  }

  async getHierarchyLevel(
    parentId: string
  ): Promise<PrismaHierarchyLevel | null> {
    return this.prisma.assetHierarchy
      .findUnique({
        where: { id: parentId },
      })
      .hierarchyLevel();
  }
}
