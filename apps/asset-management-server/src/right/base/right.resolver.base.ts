/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Right } from "./Right";
import { RightCountArgs } from "./RightCountArgs";
import { RightFindManyArgs } from "./RightFindManyArgs";
import { RightFindUniqueArgs } from "./RightFindUniqueArgs";
import { CreateRightArgs } from "./CreateRightArgs";
import { UpdateRightArgs } from "./UpdateRightArgs";
import { DeleteRightArgs } from "./DeleteRightArgs";
import { RoleRightFindManyArgs } from "../../roleRight/base/RoleRightFindManyArgs";
import { RoleRight } from "../../roleRight/base/RoleRight";
import { RightService } from "../right.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Right)
export class RightResolverBase {
  constructor(
    protected readonly service: RightService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Right",
    action: "read",
    possession: "any",
  })
  async _rightsMeta(
    @graphql.Args() args: RightCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Right])
  @nestAccessControl.UseRoles({
    resource: "Right",
    action: "read",
    possession: "any",
  })
  async rights(@graphql.Args() args: RightFindManyArgs): Promise<Right[]> {
    return this.service.rights(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Right, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Right",
    action: "read",
    possession: "own",
  })
  async right(
    @graphql.Args() args: RightFindUniqueArgs
  ): Promise<Right | null> {
    const result = await this.service.right(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Right)
  @nestAccessControl.UseRoles({
    resource: "Right",
    action: "create",
    possession: "any",
  })
  async createRight(@graphql.Args() args: CreateRightArgs): Promise<Right> {
    return await this.service.createRight({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Right)
  @nestAccessControl.UseRoles({
    resource: "Right",
    action: "update",
    possession: "any",
  })
  async updateRight(
    @graphql.Args() args: UpdateRightArgs
  ): Promise<Right | null> {
    try {
      return await this.service.updateRight({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Right)
  @nestAccessControl.UseRoles({
    resource: "Right",
    action: "delete",
    possession: "any",
  })
  async deleteRight(
    @graphql.Args() args: DeleteRightArgs
  ): Promise<Right | null> {
    try {
      return await this.service.deleteRight(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RoleRight], { name: "roleRights" })
  @nestAccessControl.UseRoles({
    resource: "RoleRight",
    action: "read",
    possession: "any",
  })
  async findRoleRights(
    @graphql.Parent() parent: Right,
    @graphql.Args() args: RoleRightFindManyArgs
  ): Promise<RoleRight[]> {
    const results = await this.service.findRoleRights(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
