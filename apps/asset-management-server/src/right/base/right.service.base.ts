/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Right as PrismaRight,
  RoleRight as PrismaRoleRight,
} from "@prisma/client";

export class RightServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RightCountArgs, "select">): Promise<number> {
    return this.prisma.right.count(args);
  }

  async rights(args: Prisma.RightFindManyArgs): Promise<PrismaRight[]> {
    return this.prisma.right.findMany(args);
  }
  async right(args: Prisma.RightFindUniqueArgs): Promise<PrismaRight | null> {
    return this.prisma.right.findUnique(args);
  }
  async createRight(args: Prisma.RightCreateArgs): Promise<PrismaRight> {
    return this.prisma.right.create(args);
  }
  async updateRight(args: Prisma.RightUpdateArgs): Promise<PrismaRight> {
    return this.prisma.right.update(args);
  }
  async deleteRight(args: Prisma.RightDeleteArgs): Promise<PrismaRight> {
    return this.prisma.right.delete(args);
  }

  async findRoleRights(
    parentId: string,
    args: Prisma.RoleRightFindManyArgs
  ): Promise<PrismaRoleRight[]> {
    return this.prisma.right
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .roleRights(args);
  }
}
