/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RoleRight } from "./RoleRight";
import { RoleRightCountArgs } from "./RoleRightCountArgs";
import { RoleRightFindManyArgs } from "./RoleRightFindManyArgs";
import { RoleRightFindUniqueArgs } from "./RoleRightFindUniqueArgs";
import { CreateRoleRightArgs } from "./CreateRoleRightArgs";
import { UpdateRoleRightArgs } from "./UpdateRoleRightArgs";
import { DeleteRoleRightArgs } from "./DeleteRoleRightArgs";
import { Role } from "../../role/base/Role";
import { Right } from "../../right/base/Right";
import { RoleRightService } from "../roleRight.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RoleRight)
export class RoleRightResolverBase {
  constructor(
    protected readonly service: RoleRightService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RoleRight",
    action: "read",
    possession: "any",
  })
  async _roleRightsMeta(
    @graphql.Args() args: RoleRightCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RoleRight])
  @nestAccessControl.UseRoles({
    resource: "RoleRight",
    action: "read",
    possession: "any",
  })
  async roleRights(
    @graphql.Args() args: RoleRightFindManyArgs
  ): Promise<RoleRight[]> {
    return this.service.roleRights(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RoleRight, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RoleRight",
    action: "read",
    possession: "own",
  })
  async roleRight(
    @graphql.Args() args: RoleRightFindUniqueArgs
  ): Promise<RoleRight | null> {
    const result = await this.service.roleRight(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoleRight)
  @nestAccessControl.UseRoles({
    resource: "RoleRight",
    action: "create",
    possession: "any",
  })
  async createRoleRight(
    @graphql.Args() args: CreateRoleRightArgs
  ): Promise<RoleRight> {
    return await this.service.createRoleRight({
      ...args,
      data: {
        ...args.data,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,

        right: args.data.right
          ? {
              connect: args.data.right,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoleRight)
  @nestAccessControl.UseRoles({
    resource: "RoleRight",
    action: "update",
    possession: "any",
  })
  async updateRoleRight(
    @graphql.Args() args: UpdateRoleRightArgs
  ): Promise<RoleRight | null> {
    try {
      return await this.service.updateRoleRight({
        ...args,
        data: {
          ...args.data,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,

          right: args.data.right
            ? {
                connect: args.data.right,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoleRight)
  @nestAccessControl.UseRoles({
    resource: "RoleRight",
    action: "delete",
    possession: "any",
  })
  async deleteRoleRight(
    @graphql.Args() args: DeleteRoleRightArgs
  ): Promise<RoleRight | null> {
    try {
      return await this.service.deleteRoleRight(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "any",
  })
  async getRole(@graphql.Parent() parent: RoleRight): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Right, {
    nullable: true,
    name: "right",
  })
  @nestAccessControl.UseRoles({
    resource: "Right",
    action: "read",
    possession: "any",
  })
  async getRight(@graphql.Parent() parent: RoleRight): Promise<Right | null> {
    const result = await this.service.getRight(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
