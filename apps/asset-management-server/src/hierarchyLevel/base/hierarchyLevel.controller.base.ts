/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { HierarchyLevelService } from "../hierarchyLevel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HierarchyLevelCreateInput } from "./HierarchyLevelCreateInput";
import { HierarchyLevel } from "./HierarchyLevel";
import { HierarchyLevelFindManyArgs } from "./HierarchyLevelFindManyArgs";
import { HierarchyLevelWhereUniqueInput } from "./HierarchyLevelWhereUniqueInput";
import { HierarchyLevelUpdateInput } from "./HierarchyLevelUpdateInput";
import { AssetHierarchyFindManyArgs } from "../../assetHierarchy/base/AssetHierarchyFindManyArgs";
import { AssetHierarchy } from "../../assetHierarchy/base/AssetHierarchy";
import { AssetHierarchyWhereUniqueInput } from "../../assetHierarchy/base/AssetHierarchyWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class HierarchyLevelControllerBase {
  constructor(
    protected readonly service: HierarchyLevelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HierarchyLevel })
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createHierarchyLevel(
    @common.Body() data: HierarchyLevelCreateInput
  ): Promise<HierarchyLevel> {
    return await this.service.createHierarchyLevel({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        levelName: true,
        description: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [HierarchyLevel] })
  @ApiNestedQuery(HierarchyLevelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async hierarchyLevels(
    @common.Req() request: Request
  ): Promise<HierarchyLevel[]> {
    const args = plainToClass(HierarchyLevelFindManyArgs, request.query);
    return this.service.hierarchyLevels({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        levelName: true,
        description: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HierarchyLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async hierarchyLevel(
    @common.Param() params: HierarchyLevelWhereUniqueInput
  ): Promise<HierarchyLevel | null> {
    const result = await this.service.hierarchyLevel({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        levelName: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HierarchyLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateHierarchyLevel(
    @common.Param() params: HierarchyLevelWhereUniqueInput,
    @common.Body() data: HierarchyLevelUpdateInput
  ): Promise<HierarchyLevel | null> {
    try {
      return await this.service.updateHierarchyLevel({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          levelName: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HierarchyLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteHierarchyLevel(
    @common.Param() params: HierarchyLevelWhereUniqueInput
  ): Promise<HierarchyLevel | null> {
    try {
      return await this.service.deleteHierarchyLevel({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          levelName: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/assetHierarchies")
  @ApiNestedQuery(AssetHierarchyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AssetHierarchy",
    action: "read",
    possession: "any",
  })
  async findAssetHierarchies(
    @common.Req() request: Request,
    @common.Param() params: HierarchyLevelWhereUniqueInput
  ): Promise<AssetHierarchy[]> {
    const query = plainToClass(AssetHierarchyFindManyArgs, request.query);
    const results = await this.service.findAssetHierarchies(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        parent: true,

        hierarchyLevel: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/assetHierarchies")
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "update",
    possession: "any",
  })
  async connectAssetHierarchies(
    @common.Param() params: HierarchyLevelWhereUniqueInput,
    @common.Body() body: AssetHierarchyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetHierarchies: {
        connect: body,
      },
    };
    await this.service.updateHierarchyLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/assetHierarchies")
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "update",
    possession: "any",
  })
  async updateAssetHierarchies(
    @common.Param() params: HierarchyLevelWhereUniqueInput,
    @common.Body() body: AssetHierarchyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetHierarchies: {
        set: body,
      },
    };
    await this.service.updateHierarchyLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/assetHierarchies")
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "update",
    possession: "any",
  })
  async disconnectAssetHierarchies(
    @common.Param() params: HierarchyLevelWhereUniqueInput,
    @common.Body() body: AssetHierarchyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assetHierarchies: {
        disconnect: body,
      },
    };
    await this.service.updateHierarchyLevel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
