/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HierarchyLevel } from "./HierarchyLevel";
import { HierarchyLevelCountArgs } from "./HierarchyLevelCountArgs";
import { HierarchyLevelFindManyArgs } from "./HierarchyLevelFindManyArgs";
import { HierarchyLevelFindUniqueArgs } from "./HierarchyLevelFindUniqueArgs";
import { CreateHierarchyLevelArgs } from "./CreateHierarchyLevelArgs";
import { UpdateHierarchyLevelArgs } from "./UpdateHierarchyLevelArgs";
import { DeleteHierarchyLevelArgs } from "./DeleteHierarchyLevelArgs";
import { AssetHierarchyFindManyArgs } from "../../assetHierarchy/base/AssetHierarchyFindManyArgs";
import { AssetHierarchy } from "../../assetHierarchy/base/AssetHierarchy";
import { HierarchyLevelService } from "../hierarchyLevel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HierarchyLevel)
export class HierarchyLevelResolverBase {
  constructor(
    protected readonly service: HierarchyLevelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "read",
    possession: "any",
  })
  async _hierarchyLevelsMeta(
    @graphql.Args() args: HierarchyLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HierarchyLevel])
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "read",
    possession: "any",
  })
  async hierarchyLevels(
    @graphql.Args() args: HierarchyLevelFindManyArgs
  ): Promise<HierarchyLevel[]> {
    return this.service.hierarchyLevels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HierarchyLevel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "read",
    possession: "own",
  })
  async hierarchyLevel(
    @graphql.Args() args: HierarchyLevelFindUniqueArgs
  ): Promise<HierarchyLevel | null> {
    const result = await this.service.hierarchyLevel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HierarchyLevel)
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "create",
    possession: "any",
  })
  async createHierarchyLevel(
    @graphql.Args() args: CreateHierarchyLevelArgs
  ): Promise<HierarchyLevel> {
    return await this.service.createHierarchyLevel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HierarchyLevel)
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "update",
    possession: "any",
  })
  async updateHierarchyLevel(
    @graphql.Args() args: UpdateHierarchyLevelArgs
  ): Promise<HierarchyLevel | null> {
    try {
      return await this.service.updateHierarchyLevel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HierarchyLevel)
  @nestAccessControl.UseRoles({
    resource: "HierarchyLevel",
    action: "delete",
    possession: "any",
  })
  async deleteHierarchyLevel(
    @graphql.Args() args: DeleteHierarchyLevelArgs
  ): Promise<HierarchyLevel | null> {
    try {
      return await this.service.deleteHierarchyLevel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AssetHierarchy], { name: "assetHierarchies" })
  @nestAccessControl.UseRoles({
    resource: "AssetHierarchy",
    action: "read",
    possession: "any",
  })
  async findAssetHierarchies(
    @graphql.Parent() parent: HierarchyLevel,
    @graphql.Args() args: AssetHierarchyFindManyArgs
  ): Promise<AssetHierarchy[]> {
    const results = await this.service.findAssetHierarchies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
