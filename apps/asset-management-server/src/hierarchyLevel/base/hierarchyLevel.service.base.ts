/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  HierarchyLevel as PrismaHierarchyLevel,
  AssetHierarchy as PrismaAssetHierarchy,
} from "@prisma/client";

export class HierarchyLevelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HierarchyLevelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.hierarchyLevel.count(args);
  }

  async hierarchyLevels(
    args: Prisma.HierarchyLevelFindManyArgs
  ): Promise<PrismaHierarchyLevel[]> {
    return this.prisma.hierarchyLevel.findMany(args);
  }
  async hierarchyLevel(
    args: Prisma.HierarchyLevelFindUniqueArgs
  ): Promise<PrismaHierarchyLevel | null> {
    return this.prisma.hierarchyLevel.findUnique(args);
  }
  async createHierarchyLevel(
    args: Prisma.HierarchyLevelCreateArgs
  ): Promise<PrismaHierarchyLevel> {
    return this.prisma.hierarchyLevel.create(args);
  }
  async updateHierarchyLevel(
    args: Prisma.HierarchyLevelUpdateArgs
  ): Promise<PrismaHierarchyLevel> {
    return this.prisma.hierarchyLevel.update(args);
  }
  async deleteHierarchyLevel(
    args: Prisma.HierarchyLevelDeleteArgs
  ): Promise<PrismaHierarchyLevel> {
    return this.prisma.hierarchyLevel.delete(args);
  }

  async findAssetHierarchies(
    parentId: string,
    args: Prisma.AssetHierarchyFindManyArgs
  ): Promise<PrismaAssetHierarchy[]> {
    return this.prisma.hierarchyLevel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assetHierarchies(args);
  }
}
