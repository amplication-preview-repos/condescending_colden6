datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Asset {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  description      String?
  name             String?
  assetHierarchy   AssetHierarchy? @relation(fields: [assetHierarchyId], references: [id])
  assetHierarchyId String?
  aasxes           Aasx[]
}

model HierarchyLevel {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  levelName        String?
  description      String?
  assetHierarchies AssetHierarchy[]
}

model AssetHierarchy {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  assets           Asset[]
  parent           String?
  hierarchyLevel   HierarchyLevel? @relation(fields: [hierarchyLevelId], references: [id])
  hierarchyLevelId String?
}

model Aasx {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Json?
  asset     Asset?   @relation(fields: [assetId], references: [id])
  assetId   String?
}

model User {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  firstName String?
  lastName  String?
  username  String     @unique
  email     String?    @unique
  password  String
  roles     Json
  userRoles UserRole[]
}

model Role {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String?
  description String?
  roleRights  RoleRight[]
  userRoles   UserRole[]
}

model Right {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String?
  description String?
  roleRights  RoleRight[]
}

model RoleRight {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role?    @relation(fields: [roleId], references: [id])
  roleId    String?
  right     Right?   @relation(fields: [rightId], references: [id])
  rightId   String?
}

model UserRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  role      Role?    @relation(fields: [roleId], references: [id])
  roleId    String?
}

model AppUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String?
}
